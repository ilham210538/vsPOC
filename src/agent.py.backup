import os, time, json
from dotenv import load_dotenv
from azure.identity import DefaultAzureCredential
from azure.ai.projects import AIProjectClient
from azure.ai.agents.models import FunctionTool
from tools import read_schedule, create_meeting

# Load environment variables from .env in project root
load_dotenv(os.path.join(os.path.dirname(os.path.dirname(__file__)), '.env'))

tools = FunctionTool(functions={read_schedule, create_meeting})

project = AIProjectClient(endpoint=os.environ["PROJECT_ENDPOINT"], credential=DefaultAzureCredential())

with project:
    agent = project.agents.create_agent(
        model=os.environ["MODEL_DEPLOYMENT_NAME"],
        name="CalendarAgent",
        instructions=(
            "You help with calendar queries. For availability questions, call read_schedule with a suitable window. "
            "When asked to book a slot, call create_meeting with the requested time range and attendees. "
            "Always answer in concise plain English with the local timezone name included."
        ),
        tools=tools.definitions,
    )

    thread = project.agents.threads.create()

    # Example user questions the agent can now handle (tool calls are chosen by the model):
    q1 = "What does my schedule look like next week?"
    q2 = "Am I free next Thursday 12:00–14:00?"
    q3 = "Book a 30-minute catch-up with alex@contoso.com next Thursday at 12:30, title 'Design sync'."

    project.agents.messages.create(thread_id=thread.id, role="user", content=q1)
    run = project.agents.runs.create(thread_id=thread.id, agent_id=agent.id)

    while run.status in ("queued", "in_progress", "requires_action"):
        time.sleep(1)
        run = project.agents.runs.get(thread_id=thread.id, run_id=run.id)

        if run.status == "requires_action":
            outs = []
            for call in run.required_action.submit_tool_outputs.tool_calls:
                fn = call.function.name
                args = json.loads(call.function.arguments)

                if fn == "read_schedule":
                    # If model gives relative dates (e.g., “next week”), you can resolve here if needed.
                    # Minimal guard: ensure ISO strings exist; otherwise default window is applied in tool.
                    outs.append({"tool_call_id": call.id, "output": json.dumps(read_schedule(**args))})

                if fn == "create_meeting":
                    # If the model provided natural language times, consider normalizing here.
                    # Here we assume start_iso/end_iso are already ISO strings.
                    outs.append({"tool_call_id": call.id, "output": json.dumps(create_meeting(**args))})

            project.agents.runs.submit_tool_outputs(thread_id=thread.id, run_id=run.id, tool_outputs=outs)

    # Print the final assistant message(s)
    msgs = list(project.agents.messages.list(thread_id=thread.id))
    print([m for m in msgs if m.get("role") == "assistant"])
